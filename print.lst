


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 preserve8
   18 00000000        B 
                       FP      RN               11
   19 00000000 00000000 
                       Count   EQU              0
   20 00000000 00000004 
                       Num     EQU              4
   21 00000000         
   22 00000000         
   23 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   24 00000000                 THUMB
   25 00000000         
   26 00000000         
   27 00000000         
   28 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   29 00000000         ; Output a 32-bit number in unsigned decimal format
   30 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   31 00000000         ; Output: none
   32 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   33 00000000         ; R0=0,    then output "0"
   34 00000000         ; R0=3,    then output "3"
   35 00000000         ; R0=89,   then output "89"
   36 00000000         ; R0=123,  then output "123"
   37 00000000         ; R0=9999, then output "9999"
   38 00000000         ; R0=4294967295, then output "4294967295"
   39 00000000         LCD_OutDec
   40 00000000 E92D 4BF0       PUSH             {R4-R9, R11, LR}
   41 00000004 B082            SUB              SP, #8
   42 00000006 46EB            MOV              FP, SP      ; copy stack pointe
                                                            r into frame pointe
                                                            r
   43 00000008 F04F 0400       MOV              R4, #0
   44 0000000C F8CB 4000       STR              R4, [FP, #Count] 
                                                            ; set count to 0 
   45 00000010 F8CB 0004       STR              R0, [FP, #Num] ; store input in
                                                             num



ARM Macro Assembler    Page 2 


   46 00000014 F04F 050A       MOV              R5, #10     ; use as register f
                                                            or the division
   47 00000018 2800            CMP              R0, #0
   48 0000001A D104            BNE              lopp
   49 0000001C F04F 0030       MOV              R0, #0x30
   50 00000020 F7FF FFFE       BL               ST7735_OutChar
   51 00000024 E022            B                done
   52 00000026         
   53 00000026         lopp
   54 00000026 F8DB 4004       LDR              R4, [FP, #Num] ; load number in
                                                            to r4
   55 0000002A 2C00            CMP              R4, #0
   56 0000002C D010            BEQ              Next
   57 0000002E FBB4 F6F5       UDIV             R6, R4, R5  ; isolate the first
                                                             bit of input numbe
                                                            r
   58 00000032 FB06 F705       MUL              R7, R6, R5  ;  multipy back and
                                                             put in r7
   59 00000036 EBA4 0807       SUB              R8, R4, R7  ; r8 has the remain
                                                            der which will be p
                                                            ushed on stack
   60 0000003A F84D 8D04       PUSH             {R8}        ; push least signif
                                                            icant bit on stack
   61 0000003E F8CB 6004       STR              R6, [FP, #Num] ; store the new 
                                                            number back into Nu
                                                            m
   62 00000042 F8DB 6000       LDR              R6, [FP, #Count] ; load count i
                                                            nto r6
   63 00000046 F106 0601       ADD              R6, #1      ; add count by 1
   64 0000004A F8CB 6000       STR              R6, [FP, #Count] ; store count 
                                                            back into fp
   65 0000004E E7EA            B                lopp
   66 00000050         
   67 00000050         Next
   68 00000050 F8DB 4000       LDR              R4, [FP, #Count] ; load r4 with
                                                             the count
   69 00000054 2C00            CMP              R4, #0      ; if count is 0 fin
                                                            ish 
   70 00000056 D009            BEQ              done
   71 00000058 BC01            POP              {R0}        ; pop first digit 
   72 0000005A F100 0030       ADD              R0, #0x30   ; make it a chracte
                                                            r by adding 48
   73 0000005E F7FF FFFE       BL               ST7735_OutChar ; bring to make 
                                                            character
   74 00000062 F1A4 0401       SUB              R4, #1      ; subtract count by
                                                             1
   75 00000066 F8CB 4000       STR              R4, [FP, #Count] ;store back in
                                                            to count
   76 0000006A E7F1            B                Next
   77 0000006C         
   78 0000006C         done
   79 0000006C B002            ADD              SP, #8      ; deallocate
   80 0000006E E8BD 4BF0       POP              {R4-R9, R11, LR}
   81 00000072         
   82 00000072         
   83 00000072 4770            BX               LR
   84 00000074         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   85 00000074         
   86 00000074         ; -----------------------LCD _OutFix--------------------



ARM Macro Assembler    Page 3 


                       --
   87 00000074         ; Output characters to LCD display in fixed-point format
                       
   88 00000074         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   89 00000074         ; Inputs:  R0 is an unsigned 32-bit number
   90 00000074         ; Outputs: none
   91 00000074         ; E.g., R0=0,    then output "0.000"
   92 00000074         ;       R0=3,    then output "0.003"
   93 00000074         ;       R0=89,   then output "0.089"
   94 00000074         ;       R0=123,  then output "0.123"
   95 00000074         ;       R0=9999, then output "9.999"
   96 00000074         ;       R0>9999, then output "*.***"
   97 00000074         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   98 00000074        9 
                       FPF     RN               9
   99 00000074 00000000 
                       Numfix  EQU              0
  100 00000074         
  101 00000074         LCD_OutFix
  102 00000074 E92D 4BF0       PUSH             {R4-R9, R11, LR}
  103 00000078 B081            SUB              SP, #4
  104 0000007A 46E9            MOV              FPF, SP
  105 0000007C F04F 0400       MOV              R4, #0
  106 00000080 F8C9 0000       STR              R0, [FPF, #Numfix]
  107 00000084 F04F 050A       MOV              R5, #10     ; use to divide
  108 00000088 F04F 0B03       MOV              R11, #3     ; counter
  109 0000008C F242 760F       MOV              R6, #9999
  110 00000090         
  111 00000090         
  112 00000090 42B0            CMP              R0, R6
  113 00000092 D833            BHI              astricks
  114 00000094         loopz
  115 00000094 F1BB 0F00       CMP              R11, #0
  116 00000098 D010            BEQ              addperiod
  117 0000009A F8D9 4000       LDR              R4, [FPF, #Numfix] ; load numbe
                                                            r into r4
  118 0000009E F04F 0600       MOV              R6, #0      ; clear r6
  119 000000A2 FBB4 F6F5       UDIV             R6, R4, R5  ; isolate the first
                                                             bit of input numbe
                                                            r
  120 000000A6 FB06 F705       MUL              R7, R6, R5  ;  multipy back and
                                                             put in r7
  121 000000AA EBA4 0807       SUB              R8, R4, R7  ; r8 has the remain
                                                            der which will be p
                                                            ushed on stack
  122 000000AE F84D 8D04       PUSH             {R8}        ; push least signif
                                                            icant bit on stack
  123 000000B2 F8C9 6000       STR              R6, [FPF, #Numfix] ; store the 
                                                            new number back int
                                                            o Num
  124 000000B6 F1AB 0B01       SUB              R11, #1     ; decrement counter
                                                             
  125 000000BA E7EB            B                loopz
  126 000000BC         
  127 000000BC         addperiod
  128 000000BC F06F 0801       MOV              R8, #-2     ; push period
  129 000000C0 F84D 8D04       PUSH             {R8}



ARM Macro Assembler    Page 4 


  130 000000C4 F8D9 4000       LDR              R4, [FPF, #Numfix]
  131 000000C8 FBB4 F6F5       UDIV             R6, R4, R5  ; isolate the first
                                                             bit of input numbe
                                                            r
  132 000000CC FB06 F705       MUL              R7, R6, R5  ;  multipy back and
                                                             put in r7
  133 000000D0 EBA4 0807       SUB              R8, R4, R7  ; r8 has the remain
                                                            der which will be p
                                                            ushed on stack
  134 000000D4 F84D 8D04       PUSH             {R8}        ; push least signif
                                                            icant bit on stack
  135 000000D8 F8C9 6000       STR              R6, [FPF, #Numfix] ; store the 
                                                            new number back int
                                                            o Num
  136 000000DC F04F 0B05       MOV              R11, #5     ; use as counter fo
                                                            r nextz
  137 000000E0 E7FF            B                Nextz
  138 000000E2         
  139 000000E2         Nextz
  140 000000E2 F1BB 0F00       CMP              R11, #0
  141 000000E6 D01E            BEQ              donzo
  142 000000E8 BC01            POP              {R0}        ; pop first digit 
  143 000000EA F100 0030       ADD              R0, #0x30   ; make it a chracte
                                                            r by adding 48
  144 000000EE F7FF FFFE       BL               ST7735_OutChar ; bring to make 
                                                            character
  145 000000F2 F1AB 0B01       SUB              R11, #1     ; subtract count by
                                                             1
  146 000000F6 F8C9 4000       STR              R4, [FPF, #Count] ;store back i
                                                            nto count
  147 000000FA         
  148 000000FA E7F2            B                Nextz
  149 000000FC         
  150 000000FC         
  151 000000FC         astricks
  152 000000FC         ; MOV R8, #0x2A; ascii value for astrick
  153 000000FC         ; PUSH {R8}
  154 000000FC         ; PUSH {R8}
  155 000000FC         ; PUSH {R8}
  156 000000FC         ; MOV R8, #0x2E; ascii value for period
  157 000000FC         ; PUSH {R8}
  158 000000FC         ; MOV R8, #0x2A
  159 000000FC         ; PUSH {R8} 
  160 000000FC         ; MOV R11, #5 ; use as counter for nextz
  161 000000FC         ; B Nextz
  162 000000FC         
  163 000000FC F04F 002A       MOV              R0, #0x2A
  164 00000100 F7FF FFFE       BL               ST7735_OutChar
  165 00000104 F04F 002E       MOV              R0, #0x2E
  166 00000108 F7FF FFFE       BL               ST7735_OutChar
  167 0000010C F04F 002A       MOV              R0, #0x2A
  168 00000110 F7FF FFFE       BL               ST7735_OutChar
  169 00000114 F04F 002A       MOV              R0, #0x2A
  170 00000118 F7FF FFFE       BL               ST7735_OutChar
  171 0000011C F04F 002A       MOV              R0, #0x2A
  172 00000120 F7FF FFFE       BL               ST7735_OutChar
  173 00000124 E7FF            B                donzo
  174 00000126         
  175 00000126         donzo



ARM Macro Assembler    Page 5 


  176 00000126 B001            ADD              SP, #4      ; deallocate
  177 00000128 E8BD 4BF0       POP              {R4-R9, R11, LR}
  178 0000012C 4770            BX               LR
  179 0000012E         
  180 0000012E         
  181 0000012E         
  182 0000012E 00 00           ALIGN
  183 00000130         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  184 00000130         
  185 00000130                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  186 00000130                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Tetris -IC:\Users\varun\AppData\Loc
al\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\varun\AppData\Local\
Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VER
SION SETA 536" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --p
redefine="_RTE_ SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 23 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 39 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 00000074

Symbol: LCD_OutFix
   Definitions
      At line 101 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
Next 00000050

Symbol: Next
   Definitions
      At line 67 in file Print.s
   Uses
      At line 56 in file Print.s
      At line 76 in file Print.s

Nextz 000000E2

Symbol: Nextz
   Definitions
      At line 139 in file Print.s
   Uses
      At line 137 in file Print.s
      At line 148 in file Print.s

addperiod 000000BC

Symbol: addperiod
   Definitions
      At line 127 in file Print.s
   Uses
      At line 116 in file Print.s
Comment: addperiod used once
astricks 000000FC

Symbol: astricks
   Definitions
      At line 151 in file Print.s
   Uses
      At line 113 in file Print.s
Comment: astricks used once
done 0000006C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: done
   Definitions
      At line 78 in file Print.s
   Uses
      At line 51 in file Print.s
      At line 70 in file Print.s

donzo 00000126

Symbol: donzo
   Definitions
      At line 175 in file Print.s
   Uses
      At line 141 in file Print.s
      At line 173 in file Print.s

loopz 00000094

Symbol: loopz
   Definitions
      At line 114 in file Print.s
   Uses
      At line 125 in file Print.s
Comment: loopz used once
lopp 00000026

Symbol: lopp
   Definitions
      At line 53 in file Print.s
   Uses
      At line 48 in file Print.s
      At line 65 in file Print.s

11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Count 00000000

Symbol: Count
   Definitions
      At line 19 in file Print.s
   Uses
      At line 44 in file Print.s
      At line 62 in file Print.s
      At line 64 in file Print.s
      At line 68 in file Print.s
      At line 75 in file Print.s
      At line 146 in file Print.s

Num 00000004

Symbol: Num
   Definitions
      At line 20 in file Print.s
   Uses
      At line 45 in file Print.s
      At line 54 in file Print.s
      At line 61 in file Print.s

Numfix 00000000

Symbol: Numfix
   Definitions
      At line 99 in file Print.s
   Uses
      At line 106 in file Print.s
      At line 117 in file Print.s
      At line 123 in file Print.s
      At line 130 in file Print.s
      At line 135 in file Print.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 50 in file Print.s
      At line 73 in file Print.s
      At line 144 in file Print.s
      At line 164 in file Print.s
      At line 166 in file Print.s
      At line 168 in file Print.s
      At line 170 in file Print.s
      At line 172 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
350 symbols in table
